// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    //// Replace this comment with your code.
    
    // The Dmux taking the load bit as input and address bus as select lines
    // This will split the load bit for the entire thing, into load bits for
    // each bit of the input bus, now with that split ready, we can alter each
    // bit of the input bus with a Register each. 
    // We pass the entire input to the registers and the split laod bit decides
    // the stuff for each bit.
    // In the end we just need to recombine everything using a Mux and we have
    // Our Ram chip ready.
    
    DMux8Way(in= load, sel= address, a= l0, b= l1, c= l2, d= l3, e= l4, f= l5, g= l6, h= l7);
        Register(in=in, load=l0, out=reg0);
        Register(in=in, load=l1, out=reg1);
        Register(in=in, load=l2, out=reg2);
        Register(in=in, load=l3, out=reg3);
        Register(in=in, load=l4, out=reg4);
        Register(in=in, load=l5, out=reg5);
        Register(in=in, load=l6, out=reg6);
        Register(in=in, load=l7, out=reg7);
    Mux8Way16(a= reg0, b= reg1, c= reg2, d= reg3, e= reg4, f= reg5, g= reg6, h= reg7, sel=address, out= out);

}