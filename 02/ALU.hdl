// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    
    // First set the values
    // We will do this by using a 4way mux that has zx and nx or zy and ny
    // as select lines

    /* it will have 
    0,0 = x
    0,1 = !x
    1,0 = 0
    1,1 = 1 As first it gets turned to 0 and then all bits are flipped
    */
    Not16(in = x,out=notX);
    Not16(in = y, out = notY);
    Mux4Way16(a=x, b=notX , c=false , d=true , sel[1]= zx, sel[0] = nx , out= useX); // for x
    Mux4Way16(a=y, b=notY , c=false , d= true , sel[1]= zy, sel[0] = ny , out= useY ); // for y


    // Now to Set up the f control bit using 2:1 mux
    And16(a= useX , b= useY , out= f0 );
    Add16(a = useX, b = useY , out = f1);
    Mux16(a= f0, b= f1, sel= f, out= answer); 

    // Now to check if output is to be negated
    Not16(in = answer, out = no1);
    Mux16(a= answer, b= no1, sel= no, out= out, out[15] = ng, out[0..7] = outLSB, out[8..15] = outMSB);
    // In the above line, we can directly get ng cause it's the leftmost bit.
    // if out = 0 then Or16 way will be 0, this can be done using two Or8ways
    Or8Way(in= outLSB, out= zr0);
    Or8Way(in= outMSB, out= zr1);
    Or(a= zr0, b=zr1 , out= notzr);
    Not(in= notzr, out= zr);


}